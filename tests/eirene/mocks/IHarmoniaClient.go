// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zenanet-network/go-zenanet/consensus/eirene (interfaces: IHarmoniaClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	clerk "github.com/zenanet-network/go-zenanet/consensus/eirene/clerk"
	checkpoint "github.com/zenanet-network/go-zenanet/consensus/eirene/harmonia/checkpoint"
	milestone "github.com/zenanet-network/go-zenanet/consensus/eirene/harmonia/milestone"
	span "github.com/zenanet-network/go-zenanet/consensus/eirene/harmonia/span"
	gomock "github.com/golang/mock/gomock"
)

// MockIHarmoniaClient is a mock of IHarmoniaClient interface.
type MockIHarmoniaClient struct {
	ctrl     *gomock.Controller
	recorder *MockIHarmoniaClientMockRecorder
}

// MockIHarmoniaClientMockRecorder is the mock recorder for MockIHarmoniaClient.
type MockIHarmoniaClientMockRecorder struct {
	mock *MockIHarmoniaClient
}

// NewMockIHarmoniaClient creates a new mock instance.
func NewMockIHarmoniaClient(ctrl *gomock.Controller) *MockIHarmoniaClient {
	mock := &MockIHarmoniaClient{ctrl: ctrl}
	mock.recorder = &MockIHarmoniaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHarmoniaClient) EXPECT() *MockIHarmoniaClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIHarmoniaClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIHarmoniaClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIHarmoniaClient)(nil).Close))
}

// FetchCheckpoint mocks base method.
func (m *MockIHarmoniaClient) FetchCheckpoint(arg0 context.Context, arg1 int64) (*checkpoint.Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpoint", arg0, arg1)
	ret0, _ := ret[0].(*checkpoint.Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpoint indicates an expected call of FetchCheckpoint.
func (mr *MockIHarmoniaClientMockRecorder) FetchCheckpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpoint", reflect.TypeOf((*MockIHarmoniaClient)(nil).FetchCheckpoint), arg0, arg1)
}

// FetchCheckpointCount mocks base method.
func (m *MockIHarmoniaClient) FetchCheckpointCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpointCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpointCount indicates an expected call of FetchCheckpointCount.
func (mr *MockIHarmoniaClientMockRecorder) FetchCheckpointCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpointCount", reflect.TypeOf((*MockIHarmoniaClient)(nil).FetchCheckpointCount), arg0)
}

// FetchLastNoAckMilestone mocks base method.
func (m *MockIHarmoniaClient) FetchLastNoAckMilestone(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLastNoAckMilestone", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLastNoAckMilestone indicates an expected call of FetchLastNoAckMilestone.
func (mr *MockIHarmoniaClientMockRecorder) FetchLastNoAckMilestone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLastNoAckMilestone", reflect.TypeOf((*MockIHarmoniaClient)(nil).FetchLastNoAckMilestone), arg0)
}

// FetchMilestone mocks base method.
func (m *MockIHarmoniaClient) FetchMilestone(arg0 context.Context) (*milestone.Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestone", arg0)
	ret0, _ := ret[0].(*milestone.Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestone indicates an expected call of FetchMilestone.
func (mr *MockIHarmoniaClientMockRecorder) FetchMilestone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestone", reflect.TypeOf((*MockIHarmoniaClient)(nil).FetchMilestone), arg0)
}

// FetchMilestoneCount mocks base method.
func (m *MockIHarmoniaClient) FetchMilestoneCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestoneCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestoneCount indicates an expected call of FetchMilestoneCount.
func (mr *MockIHarmoniaClientMockRecorder) FetchMilestoneCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestoneCount", reflect.TypeOf((*MockIHarmoniaClient)(nil).FetchMilestoneCount), arg0)
}

// FetchMilestoneID mocks base method.
func (m *MockIHarmoniaClient) FetchMilestoneID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestoneID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchMilestoneID indicates an expected call of FetchMilestoneID.
func (mr *MockIHarmoniaClientMockRecorder) FetchMilestoneID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestoneID", reflect.TypeOf((*MockIHarmoniaClient)(nil).FetchMilestoneID), arg0, arg1)
}

// FetchNoAckMilestone mocks base method.
func (m *MockIHarmoniaClient) FetchNoAckMilestone(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNoAckMilestone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchNoAckMilestone indicates an expected call of FetchNoAckMilestone.
func (mr *MockIHarmoniaClientMockRecorder) FetchNoAckMilestone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNoAckMilestone", reflect.TypeOf((*MockIHarmoniaClient)(nil).FetchNoAckMilestone), arg0, arg1)
}

// Span mocks base method.
func (m *MockIHarmoniaClient) Span(arg0 context.Context, arg1 uint64) (*span.HarmoniaSpan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Span", arg0, arg1)
	ret0, _ := ret[0].(*span.HarmoniaSpan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Span indicates an expected call of Span.
func (mr *MockIHarmoniaClientMockRecorder) Span(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Span", reflect.TypeOf((*MockIHarmoniaClient)(nil).Span), arg0, arg1)
}

// StateSyncEvents mocks base method.
func (m *MockIHarmoniaClient) StateSyncEvents(arg0 context.Context, arg1 uint64, arg2 int64) ([]*clerk.EventRecordWithTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateSyncEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*clerk.EventRecordWithTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateSyncEvents indicates an expected call of StateSyncEvents.
func (mr *MockIHarmoniaClientMockRecorder) StateSyncEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateSyncEvents", reflect.TypeOf((*MockIHarmoniaClient)(nil).StateSyncEvents), arg0, arg1, arg2)
}
